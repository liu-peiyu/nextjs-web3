import Head from 'next/head'

import { useEffect, useState } from "react";

import { ethers } from 'ethers';

import { Button, Card, Col, Input, InputNumber, Layout, Row, Spin, message } from 'antd';

export default function Home() {

  const [loading, setLoading] = useState(false);

  const [amount, setAmount] = useState<any>(1);

  const [provider, setProvider] = useState<any>(null);

  const [wallet, setWallet] = useState<any>(null);  

  const [transferAddress, setTransferAddress] = useState<string>('')

  const [transferPrivateKey, setTransferPrivateKey] = useState<any>('')

  const [transferBalance, setTransferBalance] = useState<Number>(0)

  const [receiveAddress, setReceiveAddress] = useState<any>('')

  const [receiveBalance, setReceiveBalance] = useState<Number>(0)

  const [transactionResult, setTransactionResult] = useState<any>(0)


  // get balance
  const getBalance = (address:string, callback:Function) =>{
    setLoading(true)
    provider.getBalance(address).then((balance:any) => {
      console.log(balance)
      setLoading(false)
      // balance is BigNumber (in wei); format ether string
      callback(ethers.utils.formatEther(balance))
    })
  }

  // transfer
  const transferToken = async () => {
    console.log('transferToken begin')
    setLoading(true)
    if(amount<=0){
      message.error('transfer amount error')
      setLoading(false)
      return
    }
    let transaction = {
      to: receiveAddress,
      value: ethers.utils.parseEther(amount.toString())
    };
    let sendTransactionPromise = wallet.sendTransaction(transaction);
    sendTransactionPromise.then((tx:any)=>{
      setLoading(false)
      setTransactionResult(JSON.stringify(tx))
    })
    
    console.log('transferToken end')
  }


  useEffect(() => {
    let provider = new ethers.providers.Web3Provider(window.ethereum);
    setProvider(provider);
    
    return () => {
      setProvider(null)
    }
  }, [])

  useEffect(() => {
    if(provider){
      transferAddress && getBalance(transferAddress, setTransferBalance)
      receiveAddress && getBalance(receiveAddress, setReceiveBalance)      
    }
  }, [provider, transactionResult])

  useEffect(() =>{
    if(transferPrivateKey && provider){
      let wallet:any = null;
      try{
        wallet = new ethers.Wallet(transferPrivateKey!, provider);
        let address = wallet.address;
        wallet && setWallet(wallet)
        wallet && setTransferAddress(address)
        getBalance(address, setTransferBalance)
      }catch (e){
        console.error(e)
      }
    }
  }, [transferPrivateKey, provider])


  return (
    <div>
      <Head>
        <title>Transfer DApp</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main>
      <Spin spinning={loading}>
      <Layout className='app'>
        <div>
        <div className='header'>
            <h1>Dont from Ganache generate accounts transfer to local wellet, Each not same generate accounts of the Ganache, deploy contract is not eth.</h1>

            <p>ef9455407bc8fc08dd1e97070f6b64c08087d10f677392e29d8bdac0b34e1d69</p>
          </div>
          <Row className='content'>

            {/* Owner */}
            <Col span={12} className="left">
              <Card title='sender'>
                <div className='operate'>
                  <div style={{ marginTop: 16 }}>
                    <Input prefix="sender address：" value={transferAddress} readOnly className="input" />
                  </div>
                  <div style={{ marginTop: 16 }}>
                    <Input prefix="sender privatekey：" value={transferPrivateKey} onChange={e => setTransferPrivateKey(e.target.value)} className="input" />
                  </div>
                  <div style={{ marginTop: 16 }}>
                    ETH Balance：<span className='address'>{transferBalance.toString()}</span>
                  </div>
                  <div style={{ marginTop: 16 }}>
                    <InputNumber prefix="send amount：" value={amount} min={0} className="input" onChange={v => setAmount(Number(v))} style={{width: '100%'}} />
                  </div>

                  <div style={{ marginTop: 16 }}>
                    <Input prefix="receiver address：" value={receiveAddress} onChange={e => setReceiveAddress(e.target.value)} className="input" />
                  </div>
                  <Button style={{ marginTop: 16 }} onClick={transferToken}>Send Token</Button>
                </div>
              </Card>

            </Col>

            {/* Reciver */}
            <Col span={12} className="right">
              <Card title='receiver'>
                <div>
                  sender address：
                  <span className='address'>{receiveAddress}</span>
                </div>
                <div>
                  sender eth balance：
                  <span className='address'>{receiveBalance.toString()}</span>
                </div> 
              </Card>

            </Col>
          </Row>

          <Card className='tx' title="trade detail" style={{ overflowY: "auto" }}>
            {Object.values(transactionResult)}
          </Card>
        </div>
      </Layout>
    </Spin>
      </main>

      
    </div>
  )
}
